// Generated by LiveScript 1.2.0
(function(){
  var restler, db, async, _, count, postUsersTo, getUsers, diff;
  restler = require('./restler.js');
  db = require('./db.js');
  async = require('async');
  _ = require('underscore');
  count = 0;
  exports.sync = function(station){
    var url, re;
    url = station.url;
    re = restler.get(url + "/users/idv", {
      parser: restler.parsers.json
    });
    console.log("re here");
    re.on('success', function(data, res){
      var remoteIdvs;
      remoteIdvs = data;
      console.log(count++);
      console.log("remoteIds - " + remoteIdvs);
      return db.users.find({}, function(err, data){
        var thisIdvs;
        thisIdvs = _(data).map(function(it){
          return [it.id, it.version.name];
        });
        console.log("thisIds - " + thisIdvs);
        console.log("this-remote - " + diff(thisIdvs, remoteIdvs));
        console.log("remote-this - " + diff(remoteIdvs, thisIdvs));
        postUsersTo(station, diff(thisIdvs, remoteIdvs));
        return getUsers(station, diff(remoteIdvs, thisIdvs));
      });
    });
  };
  postUsersTo = function(station, idvs){
    var url;
    url = station.url;
    return async.each(idvs, function(idv, cb){
      var users;
      return users = db.users.findOne({
        id: idv[0],
        'version.name': idv[1]
      }, function(err, data){
        return restler.post(url + "/users", {
          data: data
        }).on('complete', function(){
          return cb();
        });
      });
    });
  };
  getUsers = function(station, idvs){
    var url;
    url = station.url;
    return async.each(idvs, function(idv, cb){
      return restler.get(url + "/users", {
        data: {
          id: idv[0],
          'version.name': idv[1]
        }
      }.on('success', function(data){
        return db.users.insert(data, function(err, data){
          return cb();
        });
      }));
    });
  };
  diff = function(a, b){
    var a1, b1;
    a1 = _(a).map(function(it){
      return it.join(',');
    });
    b1 = _(b).map(function(it){
      return it.join(',');
    });
    return _(a1).difference(b1).map(function(it){
      return it.split(',');
    });
  };
}).call(this);
